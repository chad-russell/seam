<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="469.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="469.00"> </text><svg id="frames" x="10" width="1180"><g><title>flea`core::ptr::real_drop_in_place (1 samples, 0.40%)</title><rect x="0.3984%" y="293" width="0.3984%" height="15" fill="rgb(227,0,7)"/><text x="0.6484%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.40%)</title><rect x="0.3984%" y="277" width="0.3984%" height="15" fill="rgb(217,0,24)"/><text x="0.6484%" y="287.50"></text></g><g><title>flea`cranelift_module::module::Module&lt;B&gt;::new (1 samples, 0.40%)</title><rect x="0.7968%" y="293" width="0.3984%" height="15" fill="rgb(221,193,54)"/><text x="1.0468%" y="303.50"></text></g><g><title>flea`alloc::vec::from_elem (1 samples, 0.40%)</title><rect x="1.1952%" y="277" width="0.3984%" height="15" fill="rgb(248,212,6)"/><text x="1.4452%" y="287.50"></text></g><g><title>flea`alloc::vec::Vec&lt;T&gt;::extend_with (1 samples, 0.40%)</title><rect x="1.1952%" y="261" width="0.3984%" height="15" fill="rgb(208,68,35)"/><text x="1.4452%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.40%)</title><rect x="1.5936%" y="229" width="0.3984%" height="15" fill="rgb(232,128,0)"/><text x="1.8436%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.40%)</title><rect x="1.5936%" y="213" width="0.3984%" height="15" fill="rgb(207,160,47)"/><text x="1.8436%" y="223.50"></text></g><g><title>flea`cranelift_codegen::context::Context::clear (2 samples, 0.80%)</title><rect x="1.5936%" y="277" width="0.7968%" height="15" fill="rgb(228,23,34)"/><text x="1.8436%" y="287.50"></text></g><g><title>flea`cranelift_codegen::ir::function::Function::clear (2 samples, 0.80%)</title><rect x="1.5936%" y="261" width="0.7968%" height="15" fill="rgb(218,30,26)"/><text x="1.8436%" y="271.50"></text></g><g><title>flea`cranelift_codegen::ir::dfg::DataFlowGraph::clear (2 samples, 0.80%)</title><rect x="1.5936%" y="245" width="0.7968%" height="15" fill="rgb(220,122,19)"/><text x="1.8436%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.40%)</title><rect x="1.9920%" y="229" width="0.3984%" height="15" fill="rgb(250,228,42)"/><text x="2.2420%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.40%)</title><rect x="1.9920%" y="213" width="0.3984%" height="15" fill="rgb(240,193,28)"/><text x="2.2420%" y="223.50"></text></g><g><title>flea`&lt;cranelift_simplejit::backend::SimpleJITBackend as cranelift_module::backend::Backend&gt;::define_function (3 samples, 1.20%)</title><rect x="2.3904%" y="261" width="1.1952%" height="15" fill="rgb(216,20,37)"/><text x="2.6404%" y="271.50"></text></g><g><title>flea`cranelift_codegen::context::Context::emit_to_memory (3 samples, 1.20%)</title><rect x="2.3904%" y="245" width="1.1952%" height="15" fill="rgb(206,188,39)"/><text x="2.6404%" y="255.50"></text></g><g><title>flea`cranelift_codegen::binemit::emit_function (3 samples, 1.20%)</title><rect x="2.3904%" y="229" width="1.1952%" height="15" fill="rgb(217,207,13)"/><text x="2.6404%" y="239.50"></text></g><g><title>flea`cranelift_codegen::isa::x86::binemit::emit_inst (3 samples, 1.20%)</title><rect x="2.3904%" y="213" width="1.1952%" height="15" fill="rgb(231,73,38)"/><text x="2.6404%" y="223.50"></text></g><g><title>flea`cranelift_codegen::regalloc::diversion::RegDiversions::divert (1 samples, 0.40%)</title><rect x="3.1873%" y="197" width="0.3984%" height="15" fill="rgb(225,20,46)"/><text x="3.4373%" y="207.50"></text></g><g><title>flea`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry (1 samples, 0.40%)</title><rect x="3.1873%" y="181" width="0.3984%" height="15" fill="rgb(210,31,41)"/><text x="3.4373%" y="191.50"></text></g><g><title>flea`&lt;cranelift_codegen::isa::x86::Isa as cranelift_codegen::isa::TargetIsa&gt;::legalize_signature (2 samples, 0.80%)</title><rect x="3.5857%" y="197" width="0.7968%" height="15" fill="rgb(221,200,47)"/><text x="3.8357%" y="207.50"></text></g><g><title>flea`alloc::borrow::Cow&lt;B&gt;::to_mut (2 samples, 0.80%)</title><rect x="3.5857%" y="181" width="0.7968%" height="15" fill="rgb(226,26,5)"/><text x="3.8357%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.80%)</title><rect x="3.5857%" y="165" width="0.7968%" height="15" fill="rgb(249,33,26)"/><text x="3.8357%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (2 samples, 0.80%)</title><rect x="3.5857%" y="149" width="0.7968%" height="15" fill="rgb(235,183,28)"/><text x="3.8357%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.80%)</title><rect x="3.5857%" y="133" width="0.7968%" height="15" fill="rgb(221,5,38)"/><text x="3.8357%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.80%)</title><rect x="3.5857%" y="117" width="0.7968%" height="15" fill="rgb(247,18,42)"/><text x="3.8357%" y="127.50"></text></g><g><title>flea`cranelift_codegen::legalizer::boundary::legalize_signatures (3 samples, 1.20%)</title><rect x="3.5857%" y="213" width="1.1952%" height="15" fill="rgb(241,131,45)"/><text x="3.8357%" y="223.50"></text></g><g><title>flea`alloc::vec::Vec&lt;T&gt;::resize (1 samples, 0.40%)</title><rect x="4.3825%" y="197" width="0.3984%" height="15" fill="rgb(249,31,29)"/><text x="4.6325%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.40%)</title><rect x="4.3825%" y="181" width="0.3984%" height="15" fill="rgb(225,111,53)"/><text x="4.6325%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.40%)</title><rect x="4.3825%" y="165" width="0.3984%" height="15" fill="rgb(238,160,17)"/><text x="4.6325%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.40%)</title><rect x="4.3825%" y="149" width="0.3984%" height="15" fill="rgb(214,148,48)"/><text x="4.6325%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.40%)</title><rect x="4.3825%" y="133" width="0.3984%" height="15" fill="rgb(232,36,49)"/><text x="4.6325%" y="143.50"></text></g><g><title>flea`alloc::vec::Vec&lt;T&gt;::resize (1 samples, 0.40%)</title><rect x="5.1793%" y="181" width="0.3984%" height="15" fill="rgb(209,103,24)"/><text x="5.4293%" y="191.50"></text></g><g><title>flea`cranelift_codegen::ir::function::Function::update_encoding (3 samples, 1.20%)</title><rect x="4.7809%" y="197" width="1.1952%" height="15" fill="rgb(229,88,8)"/><text x="5.0309%" y="207.50"></text></g><g><title>flea`cranelift_codegen::isa::TargetIsa::encode (1 samples, 0.40%)</title><rect x="5.5777%" y="181" width="0.3984%" height="15" fill="rgb(213,181,19)"/><text x="5.8277%" y="191.50"></text></g><g><title>flea`&lt;cranelift_codegen::isa::enc_tables::Encodings as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.40%)</title><rect x="5.5777%" y="165" width="0.3984%" height="15" fill="rgb(254,191,54)"/><text x="5.8277%" y="175.50"></text></g><g><title>flea`cranelift_codegen::legalizer::boundary::handle_call_abi (1 samples, 0.40%)</title><rect x="5.9761%" y="197" width="0.3984%" height="15" fill="rgb(241,83,37)"/><text x="6.2261%" y="207.50"></text></g><g><title>flea`&lt;&amp;mut cranelift_codegen::cursor::FuncCursor as cranelift_codegen::ir::builder::InstInserterBase&gt;::insert_built_inst (1 samples, 0.40%)</title><rect x="6.3745%" y="133" width="0.3984%" height="15" fill="rgb(233,36,39)"/><text x="6.6245%" y="143.50"></text></g><g><title>flea`cranelift_codegen::ir::layout::Layout::insert_inst (1 samples, 0.40%)</title><rect x="6.3745%" y="117" width="0.3984%" height="15" fill="rgb(226,3,54)"/><text x="6.6245%" y="127.50"></text></g><g><title>flea`alloc::vec::Vec&lt;T&gt;::resize (1 samples, 0.40%)</title><rect x="6.3745%" y="101" width="0.3984%" height="15" fill="rgb(245,192,40)"/><text x="6.6245%" y="111.50"></text></g><g><title>flea`cranelift_codegen::ir::builder::InstBuilder::func_addr (2 samples, 0.80%)</title><rect x="6.3745%" y="149" width="0.7968%" height="15" fill="rgb(238,167,29)"/><text x="6.6245%" y="159.50"></text></g><g><title>flea`cranelift_codegen::ir::dfg::DataFlowGraph::make_inst_results (1 samples, 0.40%)</title><rect x="6.7729%" y="133" width="0.3984%" height="15" fill="rgb(232,182,51)"/><text x="7.0229%" y="143.50"></text></g><g><title>flea`cranelift_entity::list::EntityList&lt;T&gt;::push (1 samples, 0.40%)</title><rect x="6.7729%" y="117" width="0.3984%" height="15" fill="rgb(231,60,39)"/><text x="7.0229%" y="127.50"></text></g><g><title>flea`alloc::vec::Vec&lt;T&gt;::resize (1 samples, 0.40%)</title><rect x="6.7729%" y="101" width="0.3984%" height="15" fill="rgb(208,69,12)"/><text x="7.0229%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.40%)</title><rect x="6.7729%" y="85" width="0.3984%" height="15" fill="rgb(235,93,37)"/><text x="7.0229%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.40%)</title><rect x="6.7729%" y="69" width="0.3984%" height="15" fill="rgb(213,116,39)"/><text x="7.0229%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.40%)</title><rect x="6.7729%" y="53" width="0.3984%" height="15" fill="rgb(222,207,29)"/><text x="7.0229%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.40%)</title><rect x="6.7729%" y="37" width="0.3984%" height="15" fill="rgb(206,96,30)"/><text x="7.0229%" y="47.50"></text></g><g><title>flea`cranelift_codegen::legalizer::legalize_function (10 samples, 3.98%)</title><rect x="3.5857%" y="229" width="3.9841%" height="15" fill="rgb(218,138,4)"/><text x="3.8357%" y="239.50">flea..</text></g><g><title>flea`cranelift_codegen::legalizer::legalize_inst (7 samples, 2.79%)</title><rect x="4.7809%" y="213" width="2.7888%" height="15" fill="rgb(250,191,14)"/><text x="5.0309%" y="223.50">fl..</text></g><g><title>flea`cranelift_codegen::legalizer::expand_flags (3 samples, 1.20%)</title><rect x="6.3745%" y="197" width="1.1952%" height="15" fill="rgb(239,60,40)"/><text x="6.6245%" y="207.50"></text></g><g><title>flea`cranelift_codegen::legalizer::expand (3 samples, 1.20%)</title><rect x="6.3745%" y="181" width="1.1952%" height="15" fill="rgb(206,27,48)"/><text x="6.6245%" y="191.50"></text></g><g><title>flea`cranelift_codegen::legalizer::call::expand_call (3 samples, 1.20%)</title><rect x="6.3745%" y="165" width="1.1952%" height="15" fill="rgb(225,35,8)"/><text x="6.6245%" y="175.50"></text></g><g><title>flea`cranelift_codegen::isa::TargetIsa::pointer_type (1 samples, 0.40%)</title><rect x="7.1713%" y="149" width="0.3984%" height="15" fill="rgb(250,213,24)"/><text x="7.4213%" y="159.50"></text></g><g><title>flea`target_lexicon::triple::Triple::pointer_width (1 samples, 0.40%)</title><rect x="7.1713%" y="133" width="0.3984%" height="15" fill="rgb(247,123,22)"/><text x="7.4213%" y="143.50"></text></g><g><title>flea`cranelift_codegen::flowgraph::ControlFlowGraph::compute (1 samples, 0.40%)</title><rect x="7.5697%" y="213" width="0.3984%" height="15" fill="rgb(231,138,38)"/><text x="7.8197%" y="223.50"></text></g><g><title>flea`cranelift_codegen::flowgraph::ControlFlowGraph::compute_ebb (1 samples, 0.40%)</title><rect x="7.5697%" y="197" width="0.3984%" height="15" fill="rgb(231,145,46)"/><text x="7.8197%" y="207.50"></text></g><g><title>flea`cranelift_codegen::dominator_tree::DominatorTree::last_dominator (1 samples, 0.40%)</title><rect x="9.5618%" y="197" width="0.3984%" height="15" fill="rgb(251,118,11)"/><text x="9.8118%" y="207.50"></text></g><g><title>flea`cranelift_codegen::ir::dfg::DataFlowGraph::value_is_attached (1 samples, 0.40%)</title><rect x="9.9602%" y="197" width="0.3984%" height="15" fill="rgb(217,147,25)"/><text x="10.2102%" y="207.50"></text></g><g><title>flea`cranelift_codegen::verifier::Verifier::typecheck (3 samples, 1.20%)</title><rect x="10.3586%" y="197" width="1.1952%" height="15" fill="rgb(247,81,37)"/><text x="10.6086%" y="207.50"></text></g><g><title>flea`cranelift_codegen::context::Context::legalize (21 samples, 8.37%)</title><rect x="3.5857%" y="245" width="8.3665%" height="15" fill="rgb(209,12,38)"/><text x="3.8357%" y="255.50">flea`craneli..</text></g><g><title>flea`cranelift_codegen::verifier::verify_context (11 samples, 4.38%)</title><rect x="7.5697%" y="229" width="4.3825%" height="15" fill="rgb(227,1,9)"/><text x="7.8197%" y="239.50">flea`..</text></g><g><title>flea`cranelift_codegen::verifier::Verifier::run (10 samples, 3.98%)</title><rect x="7.9681%" y="213" width="3.9841%" height="15" fill="rgb(248,47,43)"/><text x="8.2181%" y="223.50">flea..</text></g><g><title>flea`cranelift_codegen::verifier::flags::verify_flags (1 samples, 0.40%)</title><rect x="11.5538%" y="197" width="0.3984%" height="15" fill="rgb(221,10,30)"/><text x="11.8038%" y="207.50"></text></g><g><title>flea`cranelift_codegen::ir::instructions::InstructionData::arguments (1 samples, 0.40%)</title><rect x="11.5538%" y="181" width="0.3984%" height="15" fill="rgb(210,229,1)"/><text x="11.8038%" y="191.50"></text></g><g><title>flea`&lt;cranelift_codegen::isa::x86::Isa as cranelift_codegen::isa::TargetIsa&gt;::prologue_epilogue (1 samples, 0.40%)</title><rect x="11.9522%" y="229" width="0.3984%" height="15" fill="rgb(222,148,37)"/><text x="12.2022%" y="239.50"></text></g><g><title>flea`cranelift_codegen::isa::x86::abi::callee_saved_gprs_used (1 samples, 0.40%)</title><rect x="11.9522%" y="213" width="0.3984%" height="15" fill="rgb(234,67,33)"/><text x="12.2022%" y="223.50"></text></g><g><title>flea`cranelift_codegen::ir::dfg::DataFlowGraph::call_signature (1 samples, 0.40%)</title><rect x="12.3506%" y="229" width="0.3984%" height="15" fill="rgb(247,98,35)"/><text x="12.6006%" y="239.50"></text></g><g><title>flea`cranelift_codegen::isa::constraints::RecipeConstraints::satisfied (1 samples, 0.40%)</title><rect x="13.1474%" y="213" width="0.3984%" height="15" fill="rgb(247,138,52)"/><text x="13.3974%" y="223.50"></text></g><g><title>flea`cranelift_codegen::regalloc::diversion::RegDiversions::diversion (1 samples, 0.40%)</title><rect x="13.1474%" y="197" width="0.3984%" height="15" fill="rgb(213,79,30)"/><text x="13.3974%" y="207.50"></text></g><g><title>flea`cranelift_codegen::verifier::locations::verify_locations (3 samples, 1.20%)</title><rect x="12.7490%" y="229" width="1.1952%" height="15" fill="rgb(246,177,23)"/><text x="12.9990%" y="239.50"></text></g><g><title>flea`cranelift_codegen::verifier::locations::LocationVerifier::check_abi_location (1 samples, 0.40%)</title><rect x="13.5458%" y="213" width="0.3984%" height="15" fill="rgb(230,62,27)"/><text x="13.7958%" y="223.50"></text></g><g><title>flea`cranelift_codegen::dominator_tree::DominatorTree::with_function (1 samples, 0.40%)</title><rect x="13.9442%" y="213" width="0.3984%" height="15" fill="rgb(216,154,8)"/><text x="14.1942%" y="223.50"></text></g><g><title>flea`cranelift_codegen::dominator_tree::DominatorTree::compute (1 samples, 0.40%)</title><rect x="13.9442%" y="197" width="0.3984%" height="15" fill="rgb(244,35,45)"/><text x="14.1942%" y="207.50"></text></g><g><title>flea`&lt;cranelift_codegen::isa::x86::Isa as cranelift_codegen::isa::TargetIsa&gt;::legal_encodings (3 samples, 1.20%)</title><rect x="16.3347%" y="197" width="1.1952%" height="15" fill="rgb(251,115,12)"/><text x="16.5847%" y="207.50"></text></g><g><title>flea`cranelift_codegen::isa::enc_tables::lookup_enclist (2 samples, 0.80%)</title><rect x="16.7331%" y="181" width="0.7968%" height="15" fill="rgb(240,54,50)"/><text x="16.9831%" y="191.50"></text></g><g><title>flea`cranelift_codegen::ir::dfg::DataFlowGraph::value_def (1 samples, 0.40%)</title><rect x="17.5299%" y="197" width="0.3984%" height="15" fill="rgb(233,84,52)"/><text x="17.7799%" y="207.50"></text></g><g><title>flea`cranelift_codegen::ir::dfg::DataFlowGraph::value_is_attached (2 samples, 0.80%)</title><rect x="17.9283%" y="197" width="0.7968%" height="15" fill="rgb(207,117,47)"/><text x="18.1783%" y="207.50"></text></g><g><title>flea`cranelift_codegen::ir::instructions::InstructionData::analyze_branch (1 samples, 0.40%)</title><rect x="18.7251%" y="197" width="0.3984%" height="15" fill="rgb(249,43,39)"/><text x="18.9751%" y="207.50"></text></g><g><title>flea`cranelift_codegen::context::Context::prologue_epilogue (21 samples, 8.37%)</title><rect x="11.9522%" y="245" width="8.3665%" height="15" fill="rgb(209,38,44)"/><text x="12.2022%" y="255.50">flea`craneli..</text></g><g><title>flea`cranelift_codegen::verifier::verify_context (16 samples, 6.37%)</title><rect x="13.9442%" y="229" width="6.3745%" height="15" fill="rgb(236,212,23)"/><text x="14.1942%" y="239.50">flea`cra..</text></g><g><title>flea`cranelift_codegen::verifier::Verifier::run (15 samples, 5.98%)</title><rect x="14.3426%" y="213" width="5.9761%" height="15" fill="rgb(242,79,21)"/><text x="14.5926%" y="223.50">flea`cra..</text></g><g><title>flea`cranelift_codegen::verifier::Verifier::typecheck (3 samples, 1.20%)</title><rect x="19.1235%" y="197" width="1.1952%" height="15" fill="rgb(211,96,35)"/><text x="19.3735%" y="207.50"></text></g><g><title>flea`cranelift_codegen::ir::instructions::InstructionData::analyze_branch (1 samples, 0.40%)</title><rect x="19.9203%" y="181" width="0.3984%" height="15" fill="rgb(253,215,40)"/><text x="20.1703%" y="191.50"></text></g><g><title>flea`cranelift_codegen::isa::x86::enc_tables::size_plus_maybe_sib_or_offset_for_inreg_1 (1 samples, 0.40%)</title><rect x="20.7171%" y="213" width="0.3984%" height="15" fill="rgb(211,81,21)"/><text x="20.9671%" y="223.50"></text></g><g><title>flea`cranelift_codegen::binemit::relaxation::relax_branches (3 samples, 1.20%)</title><rect x="20.3187%" y="229" width="1.1952%" height="15" fill="rgb(208,190,38)"/><text x="20.5687%" y="239.50"></text></g><g><title>flea`cranelift_codegen::regalloc::diversion::RegDiversions::apply (1 samples, 0.40%)</title><rect x="21.1155%" y="213" width="0.3984%" height="15" fill="rgb(235,213,38)"/><text x="21.3655%" y="223.50"></text></g><g><title>flea`cranelift_codegen::isa::constraints::RecipeConstraints::satisfied (3 samples, 1.20%)</title><rect x="21.9124%" y="213" width="1.1952%" height="15" fill="rgb(237,122,38)"/><text x="22.1624%" y="223.50"></text></g><g><title>flea`cranelift_codegen::verifier::locations::verify_locations (5 samples, 1.99%)</title><rect x="21.5139%" y="229" width="1.9920%" height="15" fill="rgb(244,218,35)"/><text x="21.7639%" y="239.50">f..</text></g><g><title>flea`cranelift_codegen::regalloc::diversion::RegDiversions::divert (1 samples, 0.40%)</title><rect x="23.1076%" y="213" width="0.3984%" height="15" fill="rgb(240,68,47)"/><text x="23.3576%" y="223.50"></text></g><g><title>flea`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry (1 samples, 0.40%)</title><rect x="23.1076%" y="197" width="0.3984%" height="15" fill="rgb(210,16,53)"/><text x="23.3576%" y="207.50"></text></g><g><title>flea`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (1 samples, 0.40%)</title><rect x="23.1076%" y="181" width="0.3984%" height="15" fill="rgb(235,124,12)"/><text x="23.3576%" y="191.50"></text></g><g><title>flea`&lt;cranelift_codegen::isa::x86::Isa as cranelift_codegen::isa::TargetIsa&gt;::flags (1 samples, 0.40%)</title><rect x="23.5060%" y="213" width="0.3984%" height="15" fill="rgb(224,169,11)"/><text x="23.7560%" y="223.50"></text></g><g><title>flea`cranelift_codegen::dominator_tree::DominatorTree::with_function (1 samples, 0.40%)</title><rect x="23.9044%" y="213" width="0.3984%" height="15" fill="rgb(250,166,2)"/><text x="24.1544%" y="223.50"></text></g><g><title>flea`cranelift_codegen::dominator_tree::DominatorTree::compute (1 samples, 0.40%)</title><rect x="23.9044%" y="197" width="0.3984%" height="15" fill="rgb(242,216,29)"/><text x="24.1544%" y="207.50"></text></g><g><title>flea`&lt;cranelift_codegen::isa::enc_tables::Encodings as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.80%)</title><rect x="27.0916%" y="197" width="0.7968%" height="15" fill="rgb(230,116,27)"/><text x="27.3416%" y="207.50"></text></g><g><title>flea`cranelift_codegen::ir::dfg::DataFlowGraph::value_is_attached (1 samples, 0.40%)</title><rect x="27.8884%" y="197" width="0.3984%" height="15" fill="rgb(228,99,48)"/><text x="28.1384%" y="207.50"></text></g><g><title>flea`cranelift_codegen::verifier::Verifier::run (12 samples, 4.78%)</title><rect x="24.3028%" y="213" width="4.7809%" height="15" fill="rgb(253,11,6)"/><text x="24.5528%" y="223.50">flea`c..</text></g><g><title>flea`cranelift_codegen::verifier::Verifier::typecheck (2 samples, 0.80%)</title><rect x="28.2869%" y="197" width="0.7968%" height="15" fill="rgb(247,143,39)"/><text x="28.5369%" y="207.50"></text></g><g><title>flea`cranelift_codegen::ir::dfg::DataFlowGraph::ctrl_typevar (1 samples, 0.40%)</title><rect x="28.6853%" y="181" width="0.3984%" height="15" fill="rgb(236,97,10)"/><text x="28.9353%" y="191.50"></text></g><g><title>flea`cranelift_codegen::ir::instructions::InstructionData::typevar_operand (1 samples, 0.40%)</title><rect x="28.6853%" y="165" width="0.3984%" height="15" fill="rgb(233,208,19)"/><text x="28.9353%" y="175.50"></text></g><g><title>flea`cranelift_codegen::context::Context::relax_branches (23 samples, 9.16%)</title><rect x="20.3187%" y="245" width="9.1633%" height="15" fill="rgb(216,164,2)"/><text x="20.5687%" y="255.50">flea`cranelif..</text></g><g><title>flea`cranelift_codegen::verifier::verify_context (15 samples, 5.98%)</title><rect x="23.5060%" y="229" width="5.9761%" height="15" fill="rgb(220,129,5)"/><text x="23.7560%" y="239.50">flea`cra..</text></g><g><title>flea`cranelift_codegen::verifier::Verifier::typecheck (1 samples, 0.40%)</title><rect x="29.0837%" y="213" width="0.3984%" height="15" fill="rgb(242,17,10)"/><text x="29.3337%" y="223.50"></text></g><g><title>flea`alloc::vec::Vec&lt;T&gt;::resize (1 samples, 0.40%)</title><rect x="31.4741%" y="181" width="0.3984%" height="15" fill="rgb(242,107,0)"/><text x="31.7241%" y="191.50"></text></g><g><title>flea`&lt;&amp;mut cranelift_codegen::cursor::EncCursor as cranelift_codegen::ir::builder::InstInserterBase&gt;::insert_built_inst (3 samples, 1.20%)</title><rect x="31.0757%" y="197" width="1.1952%" height="15" fill="rgb(251,28,31)"/><text x="31.3257%" y="207.50"></text></g><g><title>flea`cranelift_codegen::ir::layout::Layout::insert_inst (1 samples, 0.40%)</title><rect x="31.8725%" y="181" width="0.3984%" height="15" fill="rgb(233,223,10)"/><text x="32.1225%" y="191.50"></text></g><g><title>flea`alloc::vec::Vec&lt;T&gt;::resize (1 samples, 0.40%)</title><rect x="31.8725%" y="165" width="0.3984%" height="15" fill="rgb(215,21,27)"/><text x="32.1225%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.40%)</title><rect x="31.8725%" y="149" width="0.3984%" height="15" fill="rgb(232,23,21)"/><text x="32.1225%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.40%)</title><rect x="31.8725%" y="133" width="0.3984%" height="15" fill="rgb(244,5,23)"/><text x="32.1225%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.40%)</title><rect x="31.8725%" y="117" width="0.3984%" height="15" fill="rgb(226,81,46)"/><text x="32.1225%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.40%)</title><rect x="31.8725%" y="101" width="0.3984%" height="15" fill="rgb(247,70,30)"/><text x="32.1225%" y="111.50"></text></g><g><title>flea`cranelift_codegen::regalloc::coloring::Context::program_input_abi (1 samples, 0.40%)</title><rect x="32.2709%" y="197" width="0.3984%" height="15" fill="rgb(212,68,19)"/><text x="32.5209%" y="207.50"></text></g><g><title>flea`cranelift_codegen::regalloc::live_value_tracker::LiveValueTracker::process_inst (3 samples, 1.20%)</title><rect x="32.6693%" y="197" width="1.1952%" height="15" fill="rgb(240,187,13)"/><text x="32.9193%" y="207.50"></text></g><g><title>flea`cranelift_codegen::regalloc::coloring::Coloring::run (12 samples, 4.78%)</title><rect x="29.4821%" y="229" width="4.7809%" height="15" fill="rgb(223,113,26)"/><text x="29.7321%" y="239.50">flea`c..</text></g><g><title>flea`cranelift_codegen::regalloc::coloring::Context::visit_inst (9 samples, 3.59%)</title><rect x="30.6773%" y="213" width="3.5857%" height="15" fill="rgb(206,192,2)"/><text x="30.9273%" y="223.50">flea..</text></g><g><title>flea`cranelift_codegen::regalloc::solver::Solver::schedule_moves (1 samples, 0.40%)</title><rect x="33.8645%" y="197" width="0.3984%" height="15" fill="rgb(241,108,4)"/><text x="34.1145%" y="207.50"></text></g><g><title>flea`cranelift_codegen::ir::dfg::DataFlowGraph::resolve_aliases_in_arguments (1 samples, 0.40%)</title><rect x="35.0598%" y="213" width="0.3984%" height="15" fill="rgb(247,173,49)"/><text x="35.3098%" y="223.50"></text></g><g><title>flea`cranelift_codegen::ir::instructions::InstructionData::arguments_mut (1 samples, 0.40%)</title><rect x="35.0598%" y="197" width="0.3984%" height="15" fill="rgb(224,114,35)"/><text x="35.3098%" y="207.50"></text></g><g><title>flea`cranelift_codegen::regalloc::liveness::Liveness::compute (5 samples, 1.99%)</title><rect x="34.2629%" y="229" width="1.9920%" height="15" fill="rgb(245,159,27)"/><text x="34.5129%" y="239.50">f..</text></g><g><title>flea`cranelift_codegen::regalloc::liveness::get_or_create (2 samples, 0.80%)</title><rect x="35.4582%" y="213" width="0.7968%" height="15" fill="rgb(245,172,44)"/><text x="35.7082%" y="223.50"></text></g><g><title>flea`cranelift_entity::sparse::SparseMap&lt;K,V&gt;::insert (2 samples, 0.80%)</title><rect x="35.4582%" y="197" width="0.7968%" height="15" fill="rgb(236,23,11)"/><text x="35.7082%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.40%)</title><rect x="35.8566%" y="181" width="0.3984%" height="15" fill="rgb(205,117,38)"/><text x="36.1066%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.40%)</title><rect x="35.8566%" y="165" width="0.3984%" height="15" fill="rgb(237,72,25)"/><text x="36.1066%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.40%)</title><rect x="35.8566%" y="149" width="0.3984%" height="15" fill="rgb(244,70,9)"/><text x="36.1066%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.40%)</title><rect x="35.8566%" y="133" width="0.3984%" height="15" fill="rgb(217,125,39)"/><text x="36.1066%" y="143.50"></text></g><g><title>flea`cranelift_codegen::ir::dfg::DataFlowGraph::call_signature (1 samples, 0.40%)</title><rect x="37.4502%" y="213" width="0.3984%" height="15" fill="rgb(235,36,10)"/><text x="37.7002%" y="223.50"></text></g><g><title>flea`cranelift_codegen::regalloc::reload::Reload::run (5 samples, 1.99%)</title><rect x="36.2550%" y="229" width="1.9920%" height="15" fill="rgb(251,123,47)"/><text x="36.5050%" y="239.50">f..</text></g><g><title>flea`cranelift_entity::sparse::SparseMap&lt;K,V&gt;::insert (1 samples, 0.40%)</title><rect x="37.8486%" y="213" width="0.3984%" height="15" fill="rgb(221,13,13)"/><text x="38.0986%" y="223.50"></text></g><g><title>flea`cranelift_codegen::regalloc::spilling::Spilling::run (3 samples, 1.20%)</title><rect x="38.2470%" y="229" width="1.1952%" height="15" fill="rgb(238,131,9)"/><text x="38.4970%" y="239.50"></text></g><g><title>flea`cranelift_codegen::ir::instructions::InstructionData::arguments (1 samples, 0.40%)</title><rect x="42.2311%" y="213" width="0.3984%" height="15" fill="rgb(211,50,8)"/><text x="42.4811%" y="223.50"></text></g><g><title>flea`cranelift_codegen::verifier::liveness::verify_liveness (11 samples, 4.38%)</title><rect x="39.4422%" y="229" width="4.3825%" height="15" fill="rgb(245,182,24)"/><text x="39.6922%" y="239.50">flea`..</text></g><g><title>flea`cranelift_codegen::regalloc::liverange::GenericLiveRange&lt;PO&gt;::reaches_use (3 samples, 1.20%)</title><rect x="42.6295%" y="213" width="1.1952%" height="15" fill="rgb(242,14,37)"/><text x="42.8795%" y="223.50"></text></g><g><title>flea`cranelift_codegen::isa::constraints::RecipeConstraints::satisfied (2 samples, 0.80%)</title><rect x="44.6215%" y="213" width="0.7968%" height="15" fill="rgb(246,228,12)"/><text x="44.8715%" y="223.50"></text></g><g><title>flea`cranelift_codegen::verifier::locations::verify_locations (5 samples, 1.99%)</title><rect x="43.8247%" y="229" width="1.9920%" height="15" fill="rgb(213,55,15)"/><text x="44.0747%" y="239.50">f..</text></g><g><title>flea`cranelift_codegen::regalloc::diversion::RegDiversions::divert (1 samples, 0.40%)</title><rect x="45.4183%" y="213" width="0.3984%" height="15" fill="rgb(209,9,3)"/><text x="45.6683%" y="223.50"></text></g><g><title>flea`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry (1 samples, 0.40%)</title><rect x="45.4183%" y="197" width="0.3984%" height="15" fill="rgb(230,59,30)"/><text x="45.6683%" y="207.50"></text></g><g><title>flea`cranelift_codegen::dominator_tree::DominatorTree::with_function (2 samples, 0.80%)</title><rect x="45.8167%" y="213" width="0.7968%" height="15" fill="rgb(209,121,21)"/><text x="46.0667%" y="223.50"></text></g><g><title>flea`cranelift_codegen::dominator_tree::DominatorTree::compute (2 samples, 0.80%)</title><rect x="45.8167%" y="197" width="0.7968%" height="15" fill="rgb(220,109,13)"/><text x="46.0667%" y="207.50"></text></g><g><title>flea`cranelift_codegen::flowgraph::ControlFlowGraph::compute (2 samples, 0.80%)</title><rect x="46.6135%" y="213" width="0.7968%" height="15" fill="rgb(232,18,1)"/><text x="46.8635%" y="223.50"></text></g><g><title>flea`cranelift_codegen::flowgraph::ControlFlowGraph::compute_ebb (2 samples, 0.80%)</title><rect x="46.6135%" y="197" width="0.7968%" height="15" fill="rgb(215,41,42)"/><text x="46.8635%" y="207.50"></text></g><g><title>flea`cranelift_codegen::verifier::Verifier::cfg_integrity (1 samples, 0.40%)</title><rect x="47.4104%" y="213" width="0.3984%" height="15" fill="rgb(224,123,36)"/><text x="47.6604%" y="223.50"></text></g><g><title>flea`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (1 samples, 0.40%)</title><rect x="47.4104%" y="197" width="0.3984%" height="15" fill="rgb(240,125,3)"/><text x="47.6604%" y="207.50"></text></g><g><title>flea`&lt;alloc::collections::btree::set::Difference&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.40%)</title><rect x="47.4104%" y="181" width="0.3984%" height="15" fill="rgb(205,98,50)"/><text x="47.6604%" y="191.50"></text></g><g><title>flea`&lt;cranelift_codegen::isa::x86::Isa as cranelift_codegen::isa::TargetIsa&gt;::legal_encodings (2 samples, 0.80%)</title><rect x="53.3865%" y="197" width="0.7968%" height="15" fill="rgb(205,185,37)"/><text x="53.6365%" y="207.50"></text></g><g><title>flea`cranelift_codegen::isa::enc_tables::lookup_enclist (2 samples, 0.80%)</title><rect x="53.3865%" y="181" width="0.7968%" height="15" fill="rgb(238,207,15)"/><text x="53.6365%" y="191.50"></text></g><g><title>flea`cranelift_codegen::dominator_tree::DominatorTree::last_dominator (2 samples, 0.80%)</title><rect x="54.1833%" y="197" width="0.7968%" height="15" fill="rgb(213,199,42)"/><text x="54.4333%" y="207.50"></text></g><g><title>flea`cranelift_codegen::ir::dfg::DataFlowGraph::ctrl_typevar (2 samples, 0.80%)</title><rect x="54.9801%" y="197" width="0.7968%" height="15" fill="rgb(235,201,11)"/><text x="55.2301%" y="207.50"></text></g><g><title>flea`cranelift_codegen::ir::dfg::DataFlowGraph::value_def (3 samples, 1.20%)</title><rect x="55.7769%" y="197" width="1.1952%" height="15" fill="rgb(207,46,11)"/><text x="56.0269%" y="207.50"></text></g><g><title>flea`cranelift_codegen::ir::dfg::DataFlowGraph::value_is_attached (4 samples, 1.59%)</title><rect x="56.9721%" y="197" width="1.5936%" height="15" fill="rgb(241,35,35)"/><text x="57.2221%" y="207.50"></text></g><g><title>flea`cranelift_codegen::ir::instructions::ValueTypeSet::contains (1 samples, 0.40%)</title><rect x="58.5657%" y="197" width="0.3984%" height="15" fill="rgb(243,32,47)"/><text x="58.8157%" y="207.50"></text></g><g><title>flea`cranelift_codegen::ir::dfg::DataFlowGraph::compute_result_type (1 samples, 0.40%)</title><rect x="61.3546%" y="181" width="0.3984%" height="15" fill="rgb(247,202,23)"/><text x="61.6046%" y="191.50"></text></g><g><title>flea`cranelift_codegen::ir::dfg::DataFlowGraph::ctrl_typevar (1 samples, 0.40%)</title><rect x="61.7530%" y="181" width="0.3984%" height="15" fill="rgb(219,102,11)"/><text x="62.0030%" y="191.50"></text></g><g><title>flea`cranelift_codegen::ir::instructions::InstructionData::typevar_operand (1 samples, 0.40%)</title><rect x="61.7530%" y="165" width="0.3984%" height="15" fill="rgb(243,110,44)"/><text x="62.0030%" y="175.50"></text></g><g><title>flea`cranelift_codegen::ir::instructions::InstructionData::analyze_branch (1 samples, 0.40%)</title><rect x="62.1514%" y="181" width="0.3984%" height="15" fill="rgb(222,74,54)"/><text x="62.4014%" y="191.50"></text></g><g><title>flea`cranelift_codegen::ir::instructions::InstructionData::arguments (1 samples, 0.40%)</title><rect x="62.5498%" y="181" width="0.3984%" height="15" fill="rgb(216,99,12)"/><text x="62.7998%" y="191.50"></text></g><g><title>flea`cranelift_codegen::ir::instructions::OperandConstraint::resolve (1 samples, 0.40%)</title><rect x="62.9482%" y="181" width="0.3984%" height="15" fill="rgb(226,22,26)"/><text x="63.1982%" y="191.50"></text></g><g><title>flea`cranelift_codegen::verifier::Verifier::typecheck (13 samples, 5.18%)</title><rect x="58.9641%" y="197" width="5.1793%" height="15" fill="rgb(217,163,10)"/><text x="59.2141%" y="207.50">flea`c..</text></g><g><title>flea`cranelift_codegen::verifier::Verifier::check_outgoing_args (2 samples, 0.80%)</title><rect x="63.3466%" y="181" width="0.7968%" height="15" fill="rgb(213,25,53)"/><text x="63.5966%" y="191.50"></text></g><g><title>flea`cranelift_codegen::ir::instructions::InstructionData::arguments (1 samples, 0.40%)</title><rect x="63.7450%" y="165" width="0.3984%" height="15" fill="rgb(252,105,26)"/><text x="63.9950%" y="175.50"></text></g><g><title>flea`cranelift_codegen::verifier::Verifier::verify_func_ref (1 samples, 0.40%)</title><rect x="64.1434%" y="197" width="0.3984%" height="15" fill="rgb(220,39,43)"/><text x="64.3934%" y="207.50"></text></g><g><title>flea`cranelift_codegen::verifier::Verifier::verify_value (1 samples, 0.40%)</title><rect x="64.5418%" y="197" width="0.3984%" height="15" fill="rgb(229,68,48)"/><text x="64.7918%" y="207.50"></text></g><g><title>flea`cranelift_codegen::regalloc::context::Context::run (91 samples, 36.25%)</title><rect x="29.4821%" y="245" width="36.2550%" height="15" fill="rgb(252,8,32)"/><text x="29.7321%" y="255.50">flea`cranelift_codegen::regalloc::context::Context::run</text></g><g><title>flea`cranelift_codegen::verifier::verify_context (50 samples, 19.92%)</title><rect x="45.8167%" y="229" width="19.9203%" height="15" fill="rgb(223,20,43)"/><text x="46.0667%" y="239.50">flea`cranelift_codegen::verifie..</text></g><g><title>flea`cranelift_codegen::verifier::Verifier::run (45 samples, 17.93%)</title><rect x="47.8088%" y="213" width="17.9283%" height="15" fill="rgb(229,81,49)"/><text x="48.0588%" y="223.50">flea`cranelift_codegen::veri..</text></g><g><title>flea`cranelift_codegen::verifier::flags::verify_flags (2 samples, 0.80%)</title><rect x="64.9402%" y="197" width="0.7968%" height="15" fill="rgb(236,28,36)"/><text x="65.1902%" y="207.50"></text></g><g><title>flea`cranelift_codegen::ir::instructions::InstructionData::arguments (1 samples, 0.40%)</title><rect x="65.3386%" y="181" width="0.3984%" height="15" fill="rgb(249,185,26)"/><text x="65.5886%" y="191.50"></text></g><g><title>flea`cranelift_codegen::dominator_tree::DominatorTree::with_function (1 samples, 0.40%)</title><rect x="65.7371%" y="229" width="0.3984%" height="15" fill="rgb(249,174,33)"/><text x="65.9871%" y="239.50"></text></g><g><title>flea`cranelift_codegen::dominator_tree::DominatorTree::compute (1 samples, 0.40%)</title><rect x="65.7371%" y="213" width="0.3984%" height="15" fill="rgb(233,201,37)"/><text x="65.9871%" y="223.50"></text></g><g><title>flea`&lt;cranelift_codegen::ir::layout::Layout as cranelift_codegen::ir::progpoint::ProgramOrder&gt;::cmp (2 samples, 0.80%)</title><rect x="68.5259%" y="213" width="0.7968%" height="15" fill="rgb(221,78,26)"/><text x="68.7759%" y="223.50"></text></g><g><title>flea`&lt;cranelift_codegen::isa::x86::Isa as cranelift_codegen::isa::TargetIsa&gt;::legal_encodings (1 samples, 0.40%)</title><rect x="69.3227%" y="213" width="0.3984%" height="15" fill="rgb(250,127,30)"/><text x="69.5727%" y="223.50"></text></g><g><title>flea`cranelift_codegen::isa::enc_tables::lookup_enclist (1 samples, 0.40%)</title><rect x="69.3227%" y="197" width="0.3984%" height="15" fill="rgb(230,49,44)"/><text x="69.5727%" y="207.50"></text></g><g><title>flea`cranelift_codegen::dominator_tree::DominatorTree::last_dominator (1 samples, 0.40%)</title><rect x="69.7211%" y="213" width="0.3984%" height="15" fill="rgb(229,67,23)"/><text x="69.9711%" y="223.50"></text></g><g><title>flea`cranelift_codegen::ir::dfg::DataFlowGraph::call_signature (1 samples, 0.40%)</title><rect x="70.1195%" y="213" width="0.3984%" height="15" fill="rgb(249,83,47)"/><text x="70.3695%" y="223.50"></text></g><g><title>flea`cranelift_codegen::ir::dfg::DataFlowGraph::ctrl_typevar (1 samples, 0.40%)</title><rect x="70.5179%" y="213" width="0.3984%" height="15" fill="rgb(215,43,3)"/><text x="70.7679%" y="223.50"></text></g><g><title>flea`cranelift_codegen::ir::dfg::DataFlowGraph::value_is_attached (1 samples, 0.40%)</title><rect x="70.9163%" y="213" width="0.3984%" height="15" fill="rgb(238,154,13)"/><text x="71.1663%" y="223.50"></text></g><g><title>flea`cranelift_codegen::verifier::Verifier::typecheck (3 samples, 1.20%)</title><rect x="71.3147%" y="213" width="1.1952%" height="15" fill="rgb(219,56,2)"/><text x="71.5647%" y="223.50"></text></g><g><title>flea`cranelift_module::module::Module&lt;B&gt;::define_function (177 samples, 70.52%)</title><rect x="2.3904%" y="277" width="70.5179%" height="15" fill="rgb(233,0,4)"/><text x="2.6404%" y="287.50">flea`cranelift_module::module::Module&lt;B&gt;::define_function</text></g><g><title>flea`cranelift_codegen::context::Context::compile (174 samples, 69.32%)</title><rect x="3.5857%" y="261" width="69.3227%" height="15" fill="rgb(235,30,7)"/><text x="3.8357%" y="271.50">flea`cranelift_codegen::context::Context::compile</text></g><g><title>flea`cranelift_codegen::verifier::verify_context (18 samples, 7.17%)</title><rect x="65.7371%" y="245" width="7.1713%" height="15" fill="rgb(250,79,13)"/><text x="65.9871%" y="255.50">flea`crane..</text></g><g><title>flea`cranelift_codegen::verifier::Verifier::run (17 samples, 6.77%)</title><rect x="66.1355%" y="229" width="6.7729%" height="15" fill="rgb(211,146,34)"/><text x="66.3855%" y="239.50">flea`cran..</text></g><g><title>flea`cranelift_codegen::verifier::flags::verify_flags (1 samples, 0.40%)</title><rect x="72.5100%" y="213" width="0.3984%" height="15" fill="rgb(228,22,38)"/><text x="72.7600%" y="223.50"></text></g><g><title>flea`cranelift_module::module::Module&lt;B&gt;::finalize_definitions (1 samples, 0.40%)</title><rect x="72.9084%" y="277" width="0.3984%" height="15" fill="rgb(235,168,5)"/><text x="73.1584%" y="287.50"></text></g><g><title>flea`&lt;cranelift_simplejit::backend::SimpleJITBackend as cranelift_module::backend::Backend&gt;::finalize_function (1 samples, 0.40%)</title><rect x="72.9084%" y="261" width="0.3984%" height="15" fill="rgb(221,155,16)"/><text x="73.1584%" y="271.50"></text></g><g><title>flea`cranelift_simplejit::backend::SimpleJITBackend::lookup_symbol (1 samples, 0.40%)</title><rect x="72.9084%" y="245" width="0.3984%" height="15" fill="rgb(215,215,53)"/><text x="73.1584%" y="255.50"></text></g><g><title>flea`hashbrown::map::make_hash (1 samples, 0.40%)</title><rect x="72.9084%" y="229" width="0.3984%" height="15" fill="rgb(223,4,10)"/><text x="73.1584%" y="239.50"></text></g><g><title>flea`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.40%)</title><rect x="72.9084%" y="213" width="0.3984%" height="15" fill="rgb(234,103,6)"/><text x="73.1584%" y="223.50"></text></g><g><title>flea`&lt;cranelift_frontend::frontend::FuncInstBuilder as cranelift_codegen::ir::builder::InstBuilderBase&gt;::build (1 samples, 0.40%)</title><rect x="73.7052%" y="261" width="0.3984%" height="15" fill="rgb(227,97,0)"/><text x="73.9552%" y="271.50"></text></g><g><title>flea`cranelift_codegen::ir::dfg::DataFlowGraph::make_inst (1 samples, 0.40%)</title><rect x="73.7052%" y="245" width="0.3984%" height="15" fill="rgb(234,150,53)"/><text x="73.9552%" y="255.50"></text></g><g><title>flea`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.40%)</title><rect x="73.7052%" y="229" width="0.3984%" height="15" fill="rgb(228,201,54)"/><text x="73.9552%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.40%)</title><rect x="73.7052%" y="213" width="0.3984%" height="15" fill="rgb(222,22,37)"/><text x="73.9552%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.40%)</title><rect x="73.7052%" y="197" width="0.3984%" height="15" fill="rgb(237,53,32)"/><text x="73.9552%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.40%)</title><rect x="73.7052%" y="181" width="0.3984%" height="15" fill="rgb(233,25,53)"/><text x="73.9552%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.40%)</title><rect x="73.7052%" y="165" width="0.3984%" height="15" fill="rgb(210,40,34)"/><text x="73.9552%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.40%)</title><rect x="73.7052%" y="149" width="0.3984%" height="15" fill="rgb(241,220,44)"/><text x="73.9552%" y="159.50"></text></g><g><title>flea`cranelift_codegen::ir::memflags::MemFlags::new (1 samples, 0.40%)</title><rect x="74.1036%" y="261" width="0.3984%" height="15" fill="rgb(235,28,35)"/><text x="74.3536%" y="271.50"></text></g><g><title>flea`&lt;cranelift_frontend::frontend::FuncInstBuilder as cranelift_codegen::ir::builder::InstBuilderBase&gt;::build (2 samples, 0.80%)</title><rect x="74.9004%" y="245" width="0.7968%" height="15" fill="rgb(210,56,17)"/><text x="75.1504%" y="255.50"></text></g><g><title>flea`cranelift_frontend::frontend::FunctionBuilder::ensure_inserted_ebb (1 samples, 0.40%)</title><rect x="75.2988%" y="229" width="0.3984%" height="15" fill="rgb(224,130,29)"/><text x="75.5488%" y="239.50"></text></g><g><title>flea`&lt;usize as string_interner::Symbol&gt;::from_usize (1 samples, 0.40%)</title><rect x="75.6972%" y="245" width="0.3984%" height="15" fill="rgb(235,212,8)"/><text x="75.9472%" y="255.50"></text></g><g><title>flea`cranelift_codegen::ir::builder::InstBuilder::call_indirect (1 samples, 0.40%)</title><rect x="76.0956%" y="245" width="0.3984%" height="15" fill="rgb(223,33,50)"/><text x="76.3456%" y="255.50"></text></g><g><title>flea`cranelift_entity::list::EntityList&lt;T&gt;::push (1 samples, 0.40%)</title><rect x="76.4940%" y="245" width="0.3984%" height="15" fill="rgb(219,149,13)"/><text x="76.7440%" y="255.50"></text></g><g><title>flea`cranelift_entity::list::ListPool&lt;T&gt;::alloc (1 samples, 0.40%)</title><rect x="76.4940%" y="229" width="0.3984%" height="15" fill="rgb(250,156,29)"/><text x="76.7440%" y="239.50"></text></g><g><title>flea`alloc::vec::Vec&lt;T&gt;::resize (1 samples, 0.40%)</title><rect x="76.4940%" y="213" width="0.3984%" height="15" fill="rgb(216,193,19)"/><text x="76.7440%" y="223.50"></text></g><g><title>flea`cranelift_frontend::frontend::FunctionBuilder::import_signature (1 samples, 0.40%)</title><rect x="76.8924%" y="245" width="0.3984%" height="15" fill="rgb(216,135,14)"/><text x="77.1424%" y="255.50"></text></g><g><title>flea`cranelift_codegen::ir::function::Function::import_signature (1 samples, 0.40%)</title><rect x="76.8924%" y="229" width="0.3984%" height="15" fill="rgb(241,47,5)"/><text x="77.1424%" y="239.50"></text></g><g><title>flea`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.40%)</title><rect x="76.8924%" y="213" width="0.3984%" height="15" fill="rgb(233,42,35)"/><text x="77.1424%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.40%)</title><rect x="76.8924%" y="197" width="0.3984%" height="15" fill="rgb(231,13,6)"/><text x="77.1424%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.40%)</title><rect x="76.8924%" y="181" width="0.3984%" height="15" fill="rgb(207,181,40)"/><text x="77.1424%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.40%)</title><rect x="76.8924%" y="165" width="0.3984%" height="15" fill="rgb(254,173,49)"/><text x="77.1424%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.40%)</title><rect x="76.8924%" y="149" width="0.3984%" height="15" fill="rgb(221,1,38)"/><text x="77.1424%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.40%)</title><rect x="77.2908%" y="229" width="0.3984%" height="15" fill="rgb(206,124,46)"/><text x="77.5408%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (1 samples, 0.40%)</title><rect x="77.2908%" y="213" width="0.3984%" height="15" fill="rgb(249,21,11)"/><text x="77.5408%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.40%)</title><rect x="77.2908%" y="197" width="0.3984%" height="15" fill="rgb(222,201,40)"/><text x="77.5408%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.40%)</title><rect x="77.2908%" y="181" width="0.3984%" height="15" fill="rgb(235,61,29)"/><text x="77.5408%" y="191.50"></text></g><g><title>flea`flea::backend::get_cranelift_type (2 samples, 0.80%)</title><rect x="77.2908%" y="245" width="0.7968%" height="15" fill="rgb(219,207,3)"/><text x="77.5408%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.40%)</title><rect x="77.6892%" y="229" width="0.3984%" height="15" fill="rgb(222,56,46)"/><text x="77.9392%" y="239.50"></text></g><g><title>flea`flea::backend::FunctionBackend::compile_id (10 samples, 3.98%)</title><rect x="74.5020%" y="261" width="3.9841%" height="15" fill="rgb(239,76,54)"/><text x="74.7520%" y="271.50">flea..</text></g><g><title>flea`flea::semantic::Semantic::scope_get (1 samples, 0.40%)</title><rect x="78.0876%" y="245" width="0.3984%" height="15" fill="rgb(231,124,27)"/><text x="78.3376%" y="255.50"></text></g><g><title>flea`cranelift_codegen::ir::dfg::DataFlowGraph::make_inst (1 samples, 0.40%)</title><rect x="78.4861%" y="229" width="0.3984%" height="15" fill="rgb(249,195,6)"/><text x="78.7361%" y="239.50"></text></g><g><title>flea`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.40%)</title><rect x="78.4861%" y="213" width="0.3984%" height="15" fill="rgb(237,174,47)"/><text x="78.7361%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.40%)</title><rect x="78.4861%" y="197" width="0.3984%" height="15" fill="rgb(206,201,31)"/><text x="78.7361%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.40%)</title><rect x="78.4861%" y="181" width="0.3984%" height="15" fill="rgb(231,57,52)"/><text x="78.7361%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.40%)</title><rect x="78.4861%" y="165" width="0.3984%" height="15" fill="rgb(248,177,22)"/><text x="78.7361%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.40%)</title><rect x="78.4861%" y="149" width="0.3984%" height="15" fill="rgb(215,211,37)"/><text x="78.7361%" y="159.50"></text></g><g><title>flea`flea::backend::FunctionBackend::compile_id (15 samples, 5.98%)</title><rect x="73.3068%" y="277" width="5.9761%" height="15" fill="rgb(241,128,51)"/><text x="73.5568%" y="287.50">flea`fle..</text></g><g><title>flea`flea::backend::FunctionBackend::store_value (2 samples, 0.80%)</title><rect x="78.4861%" y="261" width="0.7968%" height="15" fill="rgb(227,165,31)"/><text x="78.7361%" y="271.50"></text></g><g><title>flea`&lt;cranelift_frontend::frontend::FuncInstBuilder as cranelift_codegen::ir::builder::InstBuilderBase&gt;::build (2 samples, 0.80%)</title><rect x="78.4861%" y="245" width="0.7968%" height="15" fill="rgb(228,167,24)"/><text x="78.7361%" y="255.50"></text></g><g><title>flea`cranelift_codegen::ir::layout::Layout::append_inst (1 samples, 0.40%)</title><rect x="78.8845%" y="229" width="0.3984%" height="15" fill="rgb(228,143,12)"/><text x="79.1345%" y="239.50"></text></g><g><title>flea`alloc::vec::Vec&lt;T&gt;::resize (1 samples, 0.40%)</title><rect x="78.8845%" y="213" width="0.3984%" height="15" fill="rgb(249,149,8)"/><text x="79.1345%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.40%)</title><rect x="78.8845%" y="197" width="0.3984%" height="15" fill="rgb(243,35,44)"/><text x="79.1345%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.40%)</title><rect x="78.8845%" y="181" width="0.3984%" height="15" fill="rgb(246,89,9)"/><text x="79.1345%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.40%)</title><rect x="78.8845%" y="165" width="0.3984%" height="15" fill="rgb(233,213,13)"/><text x="79.1345%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.40%)</title><rect x="78.8845%" y="149" width="0.3984%" height="15" fill="rgb(233,141,41)"/><text x="79.1345%" y="159.50"></text></g><g><title>flea`flea::parser::Parser::expect (1 samples, 0.40%)</title><rect x="79.2829%" y="245" width="0.3984%" height="15" fill="rgb(239,167,4)"/><text x="79.5329%" y="255.50"></text></g><g><title>flea`flea::parser::Lexer::pop (1 samples, 0.40%)</title><rect x="79.2829%" y="229" width="0.3984%" height="15" fill="rgb(209,217,16)"/><text x="79.5329%" y="239.50"></text></g><g><title>flea`flea::parser::Parser::expect (1 samples, 0.40%)</title><rect x="80.8765%" y="229" width="0.3984%" height="15" fill="rgb(219,88,35)"/><text x="81.1265%" y="239.50"></text></g><g><title>flea`flea::parser::Lexer::pop (1 samples, 0.40%)</title><rect x="80.8765%" y="213" width="0.3984%" height="15" fill="rgb(220,193,23)"/><text x="81.1265%" y="223.50"></text></g><g><title>flea`flea::parser::Parser::expect_range (2 samples, 0.80%)</title><rect x="81.2749%" y="229" width="0.7968%" height="15" fill="rgb(230,90,52)"/><text x="81.5249%" y="239.50"></text></g><g><title>flea`flea::parser::Lexer::pop (2 samples, 0.80%)</title><rect x="81.2749%" y="213" width="0.7968%" height="15" fill="rgb(252,106,19)"/><text x="81.5249%" y="223.50"></text></g><g><title>flea`hashbrown::map::make_hash (1 samples, 0.40%)</title><rect x="81.6733%" y="197" width="0.3984%" height="15" fill="rgb(206,74,20)"/><text x="81.9233%" y="207.50"></text></g><g><title>flea`flea::parser::Parser::parse_lvalue (5 samples, 1.99%)</title><rect x="82.0717%" y="229" width="1.9920%" height="15" fill="rgb(230,138,44)"/><text x="82.3217%" y="239.50">f..</text></g><g><title>flea`flea::parser::Lexer::pop (4 samples, 1.59%)</title><rect x="82.4701%" y="213" width="1.5936%" height="15" fill="rgb(235,182,43)"/><text x="82.7201%" y="223.50"></text></g><g><title>flea`flea::parser::Lexer::prefix_keyword (2 samples, 0.80%)</title><rect x="83.2669%" y="197" width="0.7968%" height="15" fill="rgb(242,16,51)"/><text x="83.5169%" y="207.50"></text></g><g><title>flea`flea::parser::Parser::parse_value_params (1 samples, 0.40%)</title><rect x="84.0637%" y="229" width="0.3984%" height="15" fill="rgb(248,9,4)"/><text x="84.3137%" y="239.50"></text></g><g><title>flea`flea::parser::Parser::parse_expression (19 samples, 7.57%)</title><rect x="79.6813%" y="245" width="7.5697%" height="15" fill="rgb(210,31,22)"/><text x="79.9313%" y="255.50">flea`flea:..</text></g><g><title>flea`flea::parser::Parser::push_node (7 samples, 2.79%)</title><rect x="84.4622%" y="229" width="2.7888%" height="15" fill="rgb(239,54,39)"/><text x="84.7122%" y="239.50">fl..</text></g><g><title>libsystem_malloc.dylib`realloc (4 samples, 1.59%)</title><rect x="85.6574%" y="213" width="1.5936%" height="15" fill="rgb(230,99,41)"/><text x="85.9074%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (4 samples, 1.59%)</title><rect x="85.6574%" y="197" width="1.5936%" height="15" fill="rgb(253,106,12)"/><text x="85.9074%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (4 samples, 1.59%)</title><rect x="85.6574%" y="181" width="1.5936%" height="15" fill="rgb(213,46,41)"/><text x="85.9074%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 1.59%)</title><rect x="85.6574%" y="165" width="1.5936%" height="15" fill="rgb(215,133,35)"/><text x="85.9074%" y="175.50"></text></g><g><title>flea`flea::parser::Parser::push_node (1 samples, 0.40%)</title><rect x="87.2510%" y="245" width="0.3984%" height="15" fill="rgb(213,28,5)"/><text x="87.5010%" y="255.50"></text></g><g><title>flea`flea::parser::Parser::parse (22 samples, 8.76%)</title><rect x="79.2829%" y="277" width="8.7649%" height="15" fill="rgb(215,77,49)"/><text x="79.5329%" y="287.50">flea`flea::p..</text></g><g><title>flea`flea::parser::Parser::parse_fn (22 samples, 8.76%)</title><rect x="79.2829%" y="261" width="8.7649%" height="15" fill="rgb(248,100,22)"/><text x="79.5329%" y="271.50">flea`flea::p..</text></g><g><title>flea`smallvec::SmallVec&lt;A&gt;::grow (1 samples, 0.40%)</title><rect x="87.6494%" y="245" width="0.3984%" height="15" fill="rgb(208,67,9)"/><text x="87.8994%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.40%)</title><rect x="87.6494%" y="229" width="0.3984%" height="15" fill="rgb(219,133,21)"/><text x="87.8994%" y="239.50"></text></g><g><title>flea`flea::semantic::Semantic::assign_type (1 samples, 0.40%)</title><rect x="88.0478%" y="213" width="0.3984%" height="15" fill="rgb(246,46,29)"/><text x="88.2978%" y="223.50"></text></g><g><title>flea`flea::semantic::Semantic::scope_get (1 samples, 0.40%)</title><rect x="88.0478%" y="197" width="0.3984%" height="15" fill="rgb(246,185,52)"/><text x="88.2978%" y="207.50"></text></g><g><title>flea`flea::parser::Parser::scope_get_with_scope_id (1 samples, 0.40%)</title><rect x="88.0478%" y="181" width="0.3984%" height="15" fill="rgb(252,136,11)"/><text x="88.2978%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.40%)</title><rect x="88.4462%" y="197" width="0.3984%" height="15" fill="rgb(219,138,53)"/><text x="88.6962%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (1 samples, 0.40%)</title><rect x="88.4462%" y="181" width="0.3984%" height="15" fill="rgb(211,51,23)"/><text x="88.6962%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.40%)</title><rect x="88.4462%" y="165" width="0.3984%" height="15" fill="rgb(247,221,28)"/><text x="88.6962%" y="175.50"></text></g><g><title>flea`flea::semantic::Semantic::match_types (2 samples, 0.80%)</title><rect x="88.4462%" y="213" width="0.7968%" height="15" fill="rgb(251,222,45)"/><text x="88.6962%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.40%)</title><rect x="88.8446%" y="197" width="0.3984%" height="15" fill="rgb(217,162,53)"/><text x="89.0946%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.40%)</title><rect x="88.8446%" y="181" width="0.3984%" height="15" fill="rgb(229,93,14)"/><text x="89.0946%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.40%)</title><rect x="88.8446%" y="165" width="0.3984%" height="15" fill="rgb(209,67,49)"/><text x="89.0946%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.40%)</title><rect x="88.8446%" y="149" width="0.3984%" height="15" fill="rgb(213,87,29)"/><text x="89.0946%" y="159.50"></text></g><g><title>flea`flea::semantic::Semantic::assign_type (4 samples, 1.59%)</title><rect x="88.0478%" y="229" width="1.5936%" height="15" fill="rgb(205,151,52)"/><text x="88.2978%" y="239.50"></text></g><g><title>flea`flea::semantic::Semantic::scope_get (1 samples, 0.40%)</title><rect x="89.2430%" y="213" width="0.3984%" height="15" fill="rgb(253,215,39)"/><text x="89.4930%" y="223.50"></text></g><g><title>flea`flea::parser::Parser::scope_get_with_scope_id (1 samples, 0.40%)</title><rect x="89.2430%" y="197" width="0.3984%" height="15" fill="rgb(221,220,41)"/><text x="89.4930%" y="207.50"></text></g><g><title>flea`alloc::collections::btree::search::search_tree (1 samples, 0.40%)</title><rect x="89.2430%" y="181" width="0.3984%" height="15" fill="rgb(218,133,21)"/><text x="89.4930%" y="191.50"></text></g><g><title>flea`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,alloc::vec::IntoIter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.40%)</title><rect x="90.8367%" y="213" width="0.3984%" height="15" fill="rgb(221,193,43)"/><text x="91.0867%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.40%)</title><rect x="90.8367%" y="197" width="0.3984%" height="15" fill="rgb(240,128,52)"/><text x="91.0867%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.40%)</title><rect x="90.8367%" y="181" width="0.3984%" height="15" fill="rgb(253,114,12)"/><text x="91.0867%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.40%)</title><rect x="90.8367%" y="165" width="0.3984%" height="15" fill="rgb(215,223,47)"/><text x="91.0867%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.40%)</title><rect x="90.8367%" y="149" width="0.3984%" height="15" fill="rgb(248,225,23)"/><text x="91.0867%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.40%)</title><rect x="90.8367%" y="133" width="0.3984%" height="15" fill="rgb(250,108,0)"/><text x="91.0867%" y="143.50"></text></g><g><title>flea`flea::semantic::Semantic::assign_type (9 samples, 3.59%)</title><rect x="88.0478%" y="245" width="3.5857%" height="15" fill="rgb(228,208,7)"/><text x="88.2978%" y="255.50">flea..</text></g><g><title>flea`flea::semantic::Semantic::match_types (5 samples, 1.99%)</title><rect x="89.6414%" y="229" width="1.9920%" height="15" fill="rgb(244,45,10)"/><text x="89.8914%" y="239.50">f..</text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.40%)</title><rect x="91.2351%" y="213" width="0.3984%" height="15" fill="rgb(207,125,25)"/><text x="91.4851%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (1 samples, 0.40%)</title><rect x="91.2351%" y="197" width="0.3984%" height="15" fill="rgb(210,195,18)"/><text x="91.4851%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.40%)</title><rect x="91.2351%" y="181" width="0.3984%" height="15" fill="rgb(249,80,12)"/><text x="91.4851%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.40%)</title><rect x="91.2351%" y="165" width="0.3984%" height="15" fill="rgb(221,65,9)"/><text x="91.4851%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 1.20%)</title><rect x="91.6335%" y="165" width="1.1952%" height="15" fill="rgb(235,49,36)"/><text x="91.8835%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.40%)</title><rect x="92.8287%" y="165" width="0.3984%" height="15" fill="rgb(225,32,20)"/><text x="93.0787%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.40%)</title><rect x="92.8287%" y="149" width="0.3984%" height="15" fill="rgb(215,141,46)"/><text x="93.0787%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.40%)</title><rect x="92.8287%" y="133" width="0.3984%" height="15" fill="rgb(250,160,47)"/><text x="93.0787%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (5 samples, 1.99%)</title><rect x="91.6335%" y="197" width="1.9920%" height="15" fill="rgb(216,222,40)"/><text x="91.8835%" y="207.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_realloc (5 samples, 1.99%)</title><rect x="91.6335%" y="181" width="1.9920%" height="15" fill="rgb(234,217,39)"/><text x="91.8835%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.40%)</title><rect x="93.2271%" y="165" width="0.3984%" height="15" fill="rgb(207,178,40)"/><text x="93.4771%" y="175.50"></text></g><g><title>flea`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter (6 samples, 2.39%)</title><rect x="91.6335%" y="229" width="2.3904%" height="15" fill="rgb(221,136,13)"/><text x="91.8835%" y="239.50">fl..</text></g><g><title>libsystem_malloc.dylib`realloc (6 samples, 2.39%)</title><rect x="91.6335%" y="213" width="2.3904%" height="15" fill="rgb(249,199,10)"/><text x="91.8835%" y="223.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.40%)</title><rect x="93.6255%" y="197" width="0.3984%" height="15" fill="rgb(249,222,13)"/><text x="93.8755%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.40%)</title><rect x="94.0239%" y="229" width="0.3984%" height="15" fill="rgb(244,185,38)"/><text x="94.2739%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.40%)</title><rect x="94.0239%" y="213" width="0.3984%" height="15" fill="rgb(236,202,9)"/><text x="94.2739%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.40%)</title><rect x="95.6175%" y="213" width="0.3984%" height="15" fill="rgb(250,229,37)"/><text x="95.8675%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 2.39%)</title><rect x="94.4223%" y="229" width="2.3904%" height="15" fill="rgb(206,174,23)"/><text x="94.6723%" y="239.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.80%)</title><rect x="96.0159%" y="213" width="0.7968%" height="15" fill="rgb(211,33,43)"/><text x="96.2659%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.40%)</title><rect x="96.4143%" y="197" width="0.3984%" height="15" fill="rgb(245,58,50)"/><text x="96.6643%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (1 samples, 0.40%)</title><rect x="96.8127%" y="197" width="0.3984%" height="15" fill="rgb(244,68,36)"/><text x="97.0627%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.40%)</title><rect x="97.2112%" y="181" width="0.3984%" height="15" fill="rgb(232,229,15)"/><text x="97.4612%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.40%)</title><rect x="97.6096%" y="181" width="0.3984%" height="15" fill="rgb(254,30,23)"/><text x="97.8596%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.40%)</title><rect x="97.6096%" y="165" width="0.3984%" height="15" fill="rgb(235,160,14)"/><text x="97.8596%" y="175.50"></text></g><g><title>flea`flea::semantic::Semantic::unify_types (17 samples, 6.77%)</title><rect x="91.6335%" y="245" width="6.7729%" height="15" fill="rgb(212,155,44)"/><text x="91.8835%" y="255.50">flea`flea..</text></g><g><title>libsystem_malloc.dylib`realloc (4 samples, 1.59%)</title><rect x="96.8127%" y="229" width="1.5936%" height="15" fill="rgb(226,2,50)"/><text x="97.0627%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (4 samples, 1.59%)</title><rect x="96.8127%" y="213" width="1.5936%" height="15" fill="rgb(234,177,6)"/><text x="97.0627%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (3 samples, 1.20%)</title><rect x="97.2112%" y="197" width="1.1952%" height="15" fill="rgb(217,24,9)"/><text x="97.4612%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (1 samples, 0.40%)</title><rect x="98.0080%" y="181" width="0.3984%" height="15" fill="rgb(220,13,46)"/><text x="98.2580%" y="191.50"></text></g><g><title>flea`flea::backend::Backend::bootstrap_from_source (245 samples, 97.61%)</title><rect x="1.1952%" y="293" width="97.6096%" height="15" fill="rgb(239,221,27)"/><text x="1.4452%" y="303.50">flea`flea::backend::Backend::bootstrap_from_source</text></g><g><title>flea`flea::semantic::Semantic::assign_top_level_types (27 samples, 10.76%)</title><rect x="88.0478%" y="277" width="10.7570%" height="15" fill="rgb(222,198,25)"/><text x="88.2978%" y="287.50">flea`flea::seman..</text></g><g><title>flea`flea::semantic::Semantic::assign_type (27 samples, 10.76%)</title><rect x="88.0478%" y="261" width="10.7570%" height="15" fill="rgb(211,99,13)"/><text x="88.2978%" y="271.50">flea`flea::seman..</text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.40%)</title><rect x="98.4064%" y="245" width="0.3984%" height="15" fill="rgb(232,111,31)"/><text x="98.6564%" y="255.50"></text></g><g><title>flea`main (249 samples, 99.20%)</title><rect x="0.0000%" y="389" width="99.2032%" height="15" fill="rgb(245,82,37)"/><text x="0.2500%" y="399.50">flea`main</text></g><g><title>flea`std::rt::lang_start_internal (249 samples, 99.20%)</title><rect x="0.0000%" y="373" width="99.2032%" height="15" fill="rgb(227,149,46)"/><text x="0.2500%" y="383.50">flea`std::rt::lang_start_internal</text></g><g><title>flea`__rust_maybe_catch_panic (248 samples, 98.80%)</title><rect x="0.3984%" y="357" width="98.8048%" height="15" fill="rgb(218,36,50)"/><text x="0.6484%" y="367.50">flea`__rust_maybe_catch_panic</text></g><g><title>flea`std::panicking::try::do_call (248 samples, 98.80%)</title><rect x="0.3984%" y="341" width="98.8048%" height="15" fill="rgb(226,80,48)"/><text x="0.6484%" y="351.50">flea`std::panicking::try::do_call</text></g><g><title>flea`std::rt::lang_start::_{{closure}} (248 samples, 98.80%)</title><rect x="0.3984%" y="325" width="98.8048%" height="15" fill="rgb(238,224,15)"/><text x="0.6484%" y="335.50">flea`std::rt::lang_start::_{{closure}}</text></g><g><title>flea`flea::main (248 samples, 98.80%)</title><rect x="0.3984%" y="309" width="98.8048%" height="15" fill="rgb(241,136,10)"/><text x="0.6484%" y="319.50">flea`flea::main</text></g><g><title>flea`flea::backend::Backend::call_func (1 samples, 0.40%)</title><rect x="98.8048%" y="293" width="0.3984%" height="15" fill="rgb(208,32,45)"/><text x="99.0548%" y="303.50"></text></g><g><title>0x103a7b7f5 (1 samples, 0.40%)</title><rect x="98.8048%" y="277" width="0.3984%" height="15" fill="rgb(207,135,9)"/><text x="99.0548%" y="287.50"></text></g><g><title>flea`flea::backend::dynamic_fn_ptr (1 samples, 0.40%)</title><rect x="98.8048%" y="261" width="0.3984%" height="15" fill="rgb(206,86,44)"/><text x="99.0548%" y="271.50"></text></g><g><title>flea`std::panicking::panicking (1 samples, 0.40%)</title><rect x="98.8048%" y="245" width="0.3984%" height="15" fill="rgb(245,177,15)"/><text x="99.0548%" y="255.50"></text></g><g><title>all (251 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(206,64,50)"/><text x="0.2500%" y="447.50"></text></g><g><title>flea`0x1 (251 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(234,36,40)"/><text x="0.2500%" y="431.50">flea`0x1</text></g><g><title>libdyld.dylib`start (251 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(213,64,8)"/><text x="0.2500%" y="415.50">libdyld.dylib`start</text></g><g><title>libsystem_kernel.dylib`__exit (2 samples, 0.80%)</title><rect x="99.2032%" y="389" width="0.7968%" height="15" fill="rgb(210,75,36)"/><text x="99.4532%" y="399.50"></text></g></svg></svg>